swagger: "2.0"
info:
  version: 1.0.0
  title: Fulfillment Payment Gateway
  description: |
    This the especific description for the API for a centralized Fulfillment Payment Gateway, this documentation is in swagger-2.0 specification. 
    
    This solution is to be used in all countries, each country will be indentified in the path. This solution covers the registration of a payment to be applied to services or products, and it is agnostic to the provisioning details.
    Each country may provide several APIs to cover the wide range of business units and product categories that are offered. Both the business unit and the product category will be part 
    of the path. 
    
    The API Proxy will group all the fulfillment methods a country offers, and will be named <b>tigo_{country}_fulfillment_v1</b>
    
    So the base for each proxy wiil be: 
    
    <b>`/v1/tigo/{country}/fulfillment`</b>
    
    And then the path will include the business unit and product type:
    
    <b>`/{businessunit}/{productType}`</b>
    
    Suggested Examples:
    * `/v1/tigo/gt/fulfillment/mobile/topups/`
    * `/v1/tigo/sv/fulfillment/home/invoices/`
    * `/v1/tigo/gt/fulfillment/invoices/` 
    [For a convergente payment businessUnit is ommited]
    
    These methods will allow the use of different identifiers for the services and products being paid, since some services will requires the MSISDN, others like Home the contractId.
    Even more specific identifiers like billingAccountId or subscriptionNumber may be needed. 
    To address this scenerio of multiple possible ids, the path includes two variables: idType and id. 
    
    <b>idType</b>: The type of identification being used expressed in a "domain" form.
    
    <b>id</b>: The unique identifier within the domain.
    
    Common combinations include:
    * `/subscribers/{msisdn}` -> also knows as the mobileid in TigoId
    * `/contracts/{contractId}` -> also know as the homeid in TigoId
    * `/billingaccounts/{billingAccountId}` -> The unique identifier within the billing system
    * `/subscriptions/{subscriptionNumber}` -> The unique idenetifier in the provisioning platform
    
    Use of identifications like Cedula or NIT are not recommended since they may be ambiogus on how to apply the payment if the customer have several services.

    Full Path Samples:
    * `/v1/tigo/gt/fulfillment/mobile/topups/subscribers/3053083937`
    * `/v1/tigo/sv/fulfillment/sv/home/invoices/contracts/1234567890`    

    We are going to usse HATEOAS Driven REST APIs. 
    HATEOAS (Hypermedia as the Engine of Application State) is a constraint of the REST application architecture that keeps the RESTful style architecture unique from most other network application architectures.
    What this means is that the body will include links with additional details and actions that can be triggered for this transaction. By providing the links, there is no need to know in advance which are the URLs needed to take those actions.
    Examples of these links include
    * A link to query information about the payment instrument used. In case of a credit card, masked information about the card can be retrieved in the provided link.
    * A link to request a rollback of the payment. Although we want to avoid this situation and we want to manage all rollbacks within the Regional Orchestration Module, if for some reason this is needed, the link to trigger this action will be provided.
    
    <i>This is the MVP. In this section we will be summarizing all the doubts that are raised with the teams of the different teams to remain with the questions and their respective answers.</i>
    
    The details of the related concepts are described in the following document-
    
    https://millicom-my.sharepoint.com/personal/andres_cavallin_millicom_com/_layouts/15/guestaccess.aspx?guestaccesstoken=JvRZ65J8I9FUZpUwLQRYJWRPu8%2fgVvaA2zUCn0BMm4s%3d&docid=2_121c58b7e6f6043a1a37d9ff3edf9a2d5&rev=1
    
  termsOfService: http://swagger.io/terms/
  contact:
    name: Armando Umerez
    email: armando.umerez@millicom.com
    url: http://www.millicom.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: test.api.tigo.com
basePath: /v1/tigo/*country*/fulfillment/*businessunit*/
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

####...######...####...##..##..#####...######..######..##..##.
#......##......##..##..##..##..##..##....##......##.....####..
####...####....##......##..##..#####.....##......##......##...
   ##..##......##..##..##..##..##..##....##......##......##...
####...######...####....####...##..##..######....##......##...

securityDefinitions:
  backend_auth:
    description: |
      This is the security that must be implemented by the countries, in addition to any authentication mechanism they have, this additional security serves to sign the message.
      Since the message is signed, the country can be sure the payment is real and that it was not forged by any other party, for example, a developer with access to Apigee.

      Another benefit of the Token is that the token can be passed through proxies without the need for those proxies to know the signing details and password.      
      
      Use of JWT standard was discarded since JWT allows for for the caller to set the hash algorithm to 'None', effectively bypassing the security.
      For that reason we are going to force the algorithm to HMAC with SHA-256 using a pre-shared key.
      
      The payload to be signed will include the following values:
      
      'productType' + 'IdType' + 'id' + 
      'paymentGatewayTransactionId' + 
      'paymentCurrencyId' + 'paymentAmount' + 
      'RegistrationDate' +
      '[pre-shared secret]'
    type: apiKey
    name: Token
    in: header
    #bearerFormat: JWT
  apigee_auth:
    description: |
      This is the security implemented in Apigee Proxy.
      Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://prod.api.tigo.com/oauth/client_credential/accesstoken?grant_type=client_credentials'
    tokenUrl: 'https://myapp.tigo.com/tigoid/callback'
    scopes:
      openid: Used to identify this API is compliant with the OpenID Connect 1.0 specification


#                        /$$     /$$
#                       | $$    | $$
#   /$$$$$$   /$$$$$$  /$$$$$$  | $$$$$$$   /$$$$$$$
#  /$$__  $$ |____  $$|_  $$_/  | $$__  $$ /$$_____/
# | $$  \ $$  /$$$$$$$  | $$    | $$  \ $$|  $$$$$$
# | $$  | $$ /$$__  $$  | $$ /$$| $$  | $$ \____  $$
# | $$$$$$$/|  $$$$$$$  |  $$$$/| $$  | $$ /$$$$$$$/
# | $$____/  \_______/   \___/  |__/  |__/|_______/
# | $$
# | $$
# |__/

paths:
#==============================================================================#
  /{productType}/{idType}/{id}/paymentregistrations/:
    get:
      summary: Get Payment Registrations By IdType And Id
      description: Get Payment Registrations. Returns all transactions that were made to the specified id in the domain of idType. 
      operationId: GetPaymentRegistrationsByIdTypeAndId
      parameters:
        - name: productType
          in: path
          description: Product Category Name for which this payment registration is intended
          required: true
          type: string
          enum: [topups, invoices, packets, addons]      
        - name: idType
          in: path
          description: Type of the Unique number of identification in the billing system
          required: true
          type: string
          enum: [contracts, billingaccounts, subscriptions, subscribers]
        - name: id
          in: path
          description: Unique number of identification in the billing system
          required: true
          type: string
      responses:
        200:
          description: List of payments registrations responses
          schema:
            $ref: '#/definitions/PaymentRegistrationResponseList'
        403:
          description: Forbidden. Check `error.message` for details
          schema:
            $ref: '#/definitions/errorBody'
        404:
          description: the specified `contractId` was not found
          schema:
            $ref: '#/definitions/errorBody'            
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorBody'
    
    post:
      summary: Create Payment Registration By IdType And Id
      description: Create a new payment registration for the specified Id in the domain of IdType. Provisioning to be handled by the backend.
      operationId: CreatePaymentRegistrationByIdTypeAndId
      parameters:
        - name: productType
          in: path
          description: Product Category Name for which this payment registration is intended
          required: true
          type: string
          enum: [topups, invoices, packets, addons]      
        - name: idType
          in: path
          description: Type of the Unique number of identification in the billing system
          required: true
          type: string
          enum: [contracts, billingaccounts, subscriptions, subscribers]
        - name: id
          in: path
          description: Unique number of identification in the billing system
          required: true
          type: string
        - name: payment
          in: body
          description: description of the product that they are going to use
          required: true
          schema:
            $ref: '#/definitions/PaymentRegistrationInfo'
      responses:
        200:
          description: Payment registration successfully received, validated and was processed synchronously by backend. Commit payment.
          schema:
            $ref: '#/definitions/PaymentRegistrationResponse'
        201:
          description: Payment registration successfully received, validated and will be processed asynchronously by backend. Commit payment.
          schema:
            $ref: '#/definitions/PaymentRegistrationResponse'
        202:
          description: Payment registration successfully received but has not been validated. Processing by backend may still fail. Don't Commit payment.
          schema:
            $ref: '#/definitions/PaymentRegistrationResponse'
        403:
          description: Forbidden. Check `error.message` for details. Rollback payment.
          schema:
            $ref: '#/definitions/errorBody'
        404:
          description: The specified `IdType` and `Id` cannot be processed. Rollback payment.
          schema:
            $ref: '#/definitions/errorBody'            
        409:
          description: Duplicate Payment Registration. Not accepted. Use `Get Payment Registration By Payment Registration Id` to determine course of action.
          schema:
            $ref: '#/definitions/errorBody'            
        412:
          description: Parameters validation failed. Will not accept. Rollback payment.
          schema:
            $ref: '#/definitions/errorBody'            
        default:
          description: unexpected error. Use `Get Payment Registration By Payment Registration Id` to determine course of action.
          schema:
            $ref: '#/definitions/errorBody'
  

            
  /{productType}/{idType}/{id}/paymentregistrations/{paymentRegistrationId}:
    get:
      summary: Get Payment Registration By IdType And Id And Payment Registration Id
      description: | 
        Get the Payment Registration specified bu the provided Id. 
        If the transaction does not exists a 404 is expected. Payment can be rollbacked.
        If the transaction is being processed and has not finished a 202 must be returned. Payment cannot be commited yet.
        If the transaction was processed a 200 OK is expected and payment can be commited.
      operationId: GetPaymentRegistrationByIdTypeAndIdAndPaymentRegistrationId
      parameters:
        - name: paymentRegistrationId
          in: path
          description: This is the id number of the transaction 
          required: true
          type: string
        - name: productType
          in: path
          description: Product Category Name for which this payment registration is intended
          required: true
          type: string
          enum: [topups, invoices, packets, addons]
        - name: idType
          in: path
          description: Type of the Unique number of identification in the billing system
          required: true
          type: string
          enum: [contracts, billingaccounts, subscriptions, subscribers]  
        - name: id
          in: path
          description: Unique number of identification in the billing system
          required: true
          type: string
      responses:
        200:
          description: Payment registration was received and payment can be commited.
          schema:
            $ref: '#/definitions/PaymentRegistrationResponse'
        202:
          description: Payment registration was received but still being processed. Payment cannot be commited yet.
          schema:
            $ref: '#/definitions/PaymentRegistrationResponse'
        403:
          description: Forbidden. Check `error.message` for details
          schema:
            $ref: '#/definitions/errorBody'
        404:
          description: the specified `PaymentRegistrationId` was not found. Payment can be rollbacked.
          schema:
            $ref: '#/definitions/errorBody'            
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorBody'
  

#        /$$            /$$$$$$  /$$           /$$   /$$     /$$
#       | $$           /$$__  $$|__/          |__/  | $$    |__/
#   /$$$$$$$  /$$$$$$ | $$  \__/ /$$ /$$$$$$$  /$$ /$$$$$$   /$$  /$$$$$$  /$$$$$$$   /$$$$$$$
#  /$$__  $$ /$$__  $$| $$$$    | $$| $$__  $$| $$|_  $$_/  | $$ /$$__  $$| $$__  $$ /$$_____/
# | $$  | $$| $$$$$$$$| $$_/    | $$| $$  \ $$| $$  | $$    | $$| $$  \ $$| $$  \ $$|  $$$$$$
# | $$  | $$| $$_____/| $$      | $$| $$  | $$| $$  | $$ /$$| $$| $$  | $$| $$  | $$ \____  $$
# |  $$$$$$$|  $$$$$$$| $$      | $$| $$  | $$| $$  |  $$$$/| $$|  $$$$$$/| $$  | $$ /$$$$$$$/
#  \_______/ \_______/|__/      |__/|__/  |__/|__/   \___/  |__/ \______/ |__/  |__/|_______/

definitions:

  PaymentRegistrationInfo:
    type: object
    required:
      - paymentCurrencyId
      - paymentAmount
      - paymentGatewayTransactionId
      - registrationDate
    properties:
      productReference:
        type: string
        description: | 
          This is the uniqued identifier that may be needed to complement the productType. For example if the productType is "packets", the productReference may be a packet identifier.
          Or if the productType is "invoices" then the productReference will be the Invoice Reference Number.
      invoiceReferenceNumber:
        type: string
        description: This is the uniqued identifier of the INVOICE being paid, some of our countries allow for incomplete amounts
      paymentAmount:
        type: number
        description: Amount to be paid for the particular invoice and ContractNumber.
        example: "23.45"
      paymentCurrencyId:
        type: string
        description: Three digit ISO identifier of the currency in which the payment is being posted.
        example: "USD"
      customerType:
        type: string
        description: This is an enumeration of customerTYPES MOBILE HOME B2B
      custumerIdType:
        type: string
        description: This is the type of the document that the user have.
        example: "NIT, CC, MSISDN..."
      customerId:
        type: string
        description: This is the unique identifier of the customer for millicom. In the following way
        example: MOBILE - msisdn HOME - homeID or Contract Number B2B - The ContractNumber or NIT
      paymentGatewayTransactionId:
        type: string
        description: This is the TransactionID of our Millicom Payment Gateway
      paymentProcessortransactionId:
        type: string
        description: This is the TransactionID of the Processing Partner, at the point of writing this documentation this is the Cybersource Payment Gateway transactionID
      paymentProcessorId:
        type: string
        description: Id of the processor identification, this must be a descriptive indetificator
      authorizationCode:
        type: string
        description: This is the authorization code of the reconciliation
      merchantId:
        type: string
        description: Id of the Merchant code registered on the bank institution
      merchantName:
        type: string
        description: Friendly name of the Merchant registered on the bank institution
      paymentRegistrationAttemptId:
        type: string
        description: Id fulfillmentEngine Transaction
      paymentChannel:
        type: string
        description: Channel where the invoice is being marked from.
        example: "MITIGOAPP2.0"
      registrationDate:
        type: string
        format: date
        description: Date when the payment was registered in ISO 8601 format
        example: "1985-04-12T23:20:50.52Z"
      purchaseOrderId:
        type: string
        description: This is the purchase order number of the app.
      customerEmail:
        type: string
        description: An email address associated with this payment
      phoneNumber:
        type: string
        description: Phone number associated with this payment registration
      customerIpAddress:
        type: string
        description: IP Address from client that submitted the registration, if it was online.
      BillToAddress:
        $ref: "#/definitions/BillToAddress"
      paymentInstrument:
        $ref: "#/definitions/PaymentInstrument"        
      ItemDetailList:
        type: array
        description: This is an array of the differents items in the purchase
        items:
          $ref: "#/definitions/ItemDetail"
      nameValuePairList:
        $ref: "#/definitions/NameValuePairList"
      links:
        type: array
        description: This is an array with the options that they can operate with the response. This is the aplicatino of HATEOAS
        items:
          $ref: "#/definitions/Link"

  Link:
    type: object
    properties:
      href:
        type: string
        description: This is the url of the method, in the first aproach we are going to use get order information and payment information. With this architecture we can use it asynchronous
      rel:
        type: string
        description: Description of the action in the method
      method:
        type: string
        description: Name of the HTTP method.
        enum: [GET, POST, DELETE, PUT]
        
  BillToAddress:
    type: object
    description: This is the information about the billing address
    properties:
      firstName:
        type: string
        description: This is the name of the item, is the exact name that user must read.
      lastName:
        type: string
        description: This is the description of the item.
      country:
        type: string
        description: This is the country of the address
      city:
        type: string
        description: This is the city of the address
      street:
        type: string
        description: This is the street of the address
      postalCode:
        type: string
        description: This is the postal code of the address
      state:
        type: string
        description: This is the state of the address

  ItemDetail:
    type: object
    description: This is the detail of the item
    properties:
      name:
        type: string
        description: This is the name or Id of the item, is the exact name that user must read.
      quantity:
        type: number
        description: Quantity of the item
      amount:
        type: number
        format: double
        description: This is the amount in a double

  NameValuePairList:
    type: array
    items:
      $ref: "#/definitions/NameValuePair"
    description: An array of Name and Value pair to pass generic data
  NameValuePair:
    type: object
    properties:
      name:
        type: string
        description: This is the name of the of data
      value:
        type: string
        description: this is the value

  PaymentInstrument:
    type: object
    properties:
      paymentMethodId:
        type: number
        description: Id of the Payment Instrument used for the payment
      paymentMethodName:
        type: string
        description: Friendly Name of the Payment Instrument used for the payment
      maskedAccountId:
        type: string
        description: For credit cards, first 4 and last 6. For other payment types, the accountid masked according to security best practices. For MFS it could be the MSISDN
      expirationDate:
        type: string
        format: date
      bankName:
        type: string
        description: The bank institution associated witht he payment
      cardBrand:
        type: string
        description: Franchise or Brand of the registered card
      tokenized:
        type: boolean
        description: True if the credit card information came from a token and not from user input

  PaymentRegistrationResponseList:
    type: array
    items:
      $ref: "#/definitions/PaymentRegistrationResponse"
  PaymentRegistrationResponse:
    type: object
    required:
      - paymentRegistrationId
      - paymentGatewayTransactionId
      - registrationDate
      - paymentAmount
    properties:
      paymentRegistrationId:
        type: string
        description: This is the id of this payment registration in the billing system.
      paymentGatewayTransactionId:
        type: string
        description: This is the id of the payment on the Payment Gateway. This is id was sent on the Create Payment Registration
      registrationDate:
        type: string
        format: date
        description: Date when the payment was registered in ISO 8601 format
        example: "1985-04-12T23:20:50.52Z"
      paymentCurrencyId:
        type: string
        description: Three digit ISO identifier of the currency in which the payment is being posted.
        example: "USD"        
      paymentAmount:
        type: number
        description: Amount to be paid for the particular invoice and ContractNumber.
        example: "23.45"
      PaymentActionId:
        type: string
        enum: [0, 1, 2]
        description: See PaymentActionName for description.
      PaymentActionName:
        type: string
        enum: ["Commit", "Rollback", "Wait"]
        description: | 
          [0-Commit] The Payment Registration was received and validated. Payment must be commited. 
          For consistency both HTTP 200 and HTTP 201 must return 0-Commit.
          [1-Rollback] The Payment Registration was received but an error ocurred while processing it asynchronously on the backend. Payment must be rollbacked.
          For consistency, only transactions that returned HTTP 202 during creation are allowed to return 1-Rollback when queried.
          [2-Wait] The Payment Registration was received but still being processed. 
          For consistency, only transactions that returned HTTP 202 during creation or transaction that timed out and never returned a response can return the 2-Wait action.
      message:
        type: string
        description: Success Message from platform. May be ommited.

#AECA NOTE: Consider just returning PaymentRegistrationResponse and ommit the Info
#  PaymentRegistrationQueryResponse:
#    type: object
#    properties:
#      PaymentRegistrationResponse:
#        $ref: "#/definitions/PaymentRegistrationResponse"        
#      PaymentRegistrationInfo:
#        $ref: "#/definitions/PaymentRegistrationInfo"        

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
  errorBody:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
