swagger: "2.0"
info:
  version: 1.0.0
  title: "App Callback Payment Gateway"
  description: |
    This is the specification that, any App integrating payment gateway functionalities, must implement in order to receive call backs for two events.
    <ul>
    <li>Processing Completed</li>
    <li>Fulfillment Completed</li>
    </ul>
    
    This callbacks will enable asynchronous processing of the payment, so the App does not need to keep polling for the result. Although APIs to poll the result will be provided too.
    It is expected that the App host these callbacks in their App Servers supporting HTTPS.
    
    The base path expressed here is relative to the App Server URL. Meaning that if for example the App Server handle all API calls in this URL:
    
    `https://micuenta.tigo.com.sv/api/`
    
    the base path expresed here will be added at the end that URL. This will be the suggested base path:
    
    `/v1/paymentgateway/callbacks/`
    
    So the combined base path for the example will be
    
    `https://micuenta.tigo.com.sv/api/v1/paymentgateway/callbacks/`
    
    This solution is to be used in all countries, since it is assumed each country host each App Server in a different URL, the country will be simply part of the callback URL and we don't need a parameter for that.
    
    Apps like "Mi Tigo", also known as "Mi Cuenta" may need to have different types of payments within the same App. 
    For example they may need to offer invoice payment for mobile phone, invoice payments for the home business, core balance top-up for hybrid-accounts and even directly selling some on demand content.
    Each one of this product types have:
      * Different fulfillment APIs in the countrie's billing system
      * Different rules for minimum amount, maximum amount and velocity
      * May even have different payment methods available, some may be too expensive for a $1 topup
      * Different fraud prevention rules like for example the acceptance of international credit cards
    
    For these reasons, each different product type will have its own App entity in the Payment Gateway and so, will have its own set of callback URL for both payemnt and fulfillment, 
    so any information about the business unit and product can be part of the url as a fixed hierarchy. For example:
    
    * `/v1/paymentgateway/callbacks/home/invoices`
    * `/v1/paymentgateway/callbacks/mobile/topups`
    * `/v1/paymentgateway/callbacks/convergent/invoices`
    
    And finally all callbacks will receive the Order Id as part of the callback URL, plus the type of callback as the resource being modified.
    So notify about payment information of an order this will be method used:
    
    `/orders/{purchaseOrderId}/payment`
    
    And to notify about fulfillment information of an order this will be the method used:
    
    `/orders/{purchaseOrderId}/fulfillment`
    
    Here are two example of full callback URLs.
    
    Sample URL to notify the App Server that a payment was processed. The App may consider this the final step and notify the user that the payment was approved. And trust the Payment Gateway to complete the fulfillment on the billing systems asyncrhonously.

    `https://micuenta.tigo.com.sv/api/v1/paymentgateway/callbacks/home/invoices/orders/{purchaseOrderId}/payment`
    
    Sample URL to notify the App Server that the fulfillment was completed. In a topup scenario, the fulfillment is more important than the payment, because if the payment is approved but the topup cannot be completed because the number was invalid or any other reason, the user needs to know as soon as possible that the transaction was not completed (and payment was rollbacked).
    
    `https://shop.tigo.com.hn/api/v1/paymentgateway/callbacks/mobile/topups/orders/{purchaseOrderId}/fulfillment`

    <i>This is the MVP. In this section we will be summarizing all the doubts that are raised with the teams of the different teams to remain with the questions and their respective answers.</i>
    
    The details of the related concepts are described in the following document-
    
    https://millicom-my.sharepoint.com/personal/andres_cavallin_millicom_com/_layouts/15/guestaccess.aspx?guestaccesstoken=JvRZ65J8I9FUZpUwLQRYJWRPu8%2fgVvaA2zUCn0BMm4s%3d&docid=2_121c58b7e6f6043a1a37d9ff3edf9a2d5&rev=1
    
  termsOfService: http://swagger.io/terms/
  contact:
    name: Andrés Cavallin
    email: andres.cavallin@millicom.com
    url: http://www.millicom.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: micuenta.tigo.com.co
basePath: /api/v1/paymentgateway/callbacks/*businessUnit*/
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

####...######...####...##..##..#####...######..######..##..##.
#......##......##..##..##..##..##..##....##......##.....####..
####...####....##......##..##..#####.....##......##......##...
   ##..##......##..##..##..##..##..##....##......##......##...
####...######...####....####...##..##..######....##......##...

securityDefinitions:
  backend_auth:
    description: |
      This is the security that must be implemented by the countries, in addition to any authentication mechanism they have, this additional security serves to sign the message.
      Since the message is signed, the App Server can be sure the payment is real and that it was not forged by any other party, for example, a developer with access to the callback API.

      Another benefit of the Token is that the token can be passed through proxies without the need for those proxies to know the signing details and password.
      
      Use of JWT standard was discarded since JWT allows for for the caller to set the hash algorithm to 'None', effectively bypassing the security.
      For that reason we are going to force the algorithm to HMAC with SHA-256 using a pre-shared key.
      
      The payload to be signed will include the following values (Note: paymentRegistrationId is only included in the Fulfillment callback):

      'productType' + 'IdType' + 'id' + 
      'purchaseOrderId' +
      'paymentCurrencyId' + 'paymentAmount' + 
      'paymentApproved' +
      'paymentGatewayTransactionId' + 
      'RegistrationDate' + 'paymentRegistrationId' +
      '[pre-shared secret]'

    type: apiKey
    name: Token
    in: header
    #bearerFormat: JWT


#                        /$$     /$$
#                       | $$    | $$
#   /$$$$$$   /$$$$$$  /$$$$$$  | $$$$$$$   /$$$$$$$
#  /$$__  $$ |____  $$|_  $$_/  | $$__  $$ /$$_____/
# | $$  \ $$  /$$$$$$$  | $$    | $$  \ $$|  $$$$$$
# | $$  | $$ /$$__  $$  | $$ /$$| $$  | $$ \____  $$
# | $$$$$$$/|  $$$$$$$  |  $$$$/| $$  | $$ /$$$$$$$/
# | $$____/  \_______/   \___/  |__/  |__/|_______/
# | $$
# | $$
# |__/

paths:
#==============================================================================#
  /{productType}/orders/{purchaseOrderId}/payment:
    put:
      summary: Update Payment Information By purchaseOrderId
      description: Payment Information including final result and validation token for the specied purchaseOrderId
      operationId: UpdatePaymentInformationByPurchaseOrderId
      parameters:
        - name: productType
          in: path
          description: Product Category Name for which this payment registration is intended
          required: true
          type: string
          enum: [topups, invoices, packets, addons]      
        - name: purchaseOrderId
          in: path
          description: Unique identification of the Order being updated. Known as purchaseOrderId for the PaymentGateway.
          required: true
          type: string
        - name: payment
          in: body
          description: Information about the payment processing result
          required: true
          schema:
            $ref: '#/definitions/PaymentInfo'
      responses:
        204:
          description: Information about the order specified by Order Id was received
        403:
          description: Forbidden or Invalid Token. Check `error.message` for details. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'
        404:
          description: The specified `purchaseOrderId` does not exists. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'            
        409:
          description: Duplicate update callback. Not accepted. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'            
        412:
          description: Parameters validation failed. Will not accept. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'            
        default:
          description: unexpected error. Callback must be retried in a few seconds.
          schema:
            $ref: '#/definitions/errorBody'

  /{productType}/orders/{purchaseOrderId}/fulfillment:
    put:
      summary: Update Fulfillment Information By purchaseOrderId
      description: Fulfillment Information including final result and validation token for the specied purchaseOrderId
      operationId: UpdateFulfillmentInformationByPurchaseOrderId
      parameters:
        - name: productType
          in: path
          description: Product Category Name for which this payment registration is intended
          required: true
          type: string
          enum: [topups, invoices, packets, addons]      
        - name: purchaseOrderId
          in: path
          description: Unique identification of the Order being updated. Known as purchaseOrderId for the Payment Gateway.
          required: true
          type: string
        - name: fulfillment
          in: body
          description: Information about the fulfillment registration result
          required: true
          schema:
            $ref: '#/definitions/PaymentInfo'
      responses:
        204:
          description: Information about the order specified by Order Id was received
        403:
          description: Forbidden or Invalid Token. Check `error.message` for details. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'
        404:
          description: The specified `purchaseOrderId` does not exists. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'            
        409:
          description: Duplicate update callback. Not accepted. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'            
        412:
          description: Parameters validation failed. Will not accept. Log error and trigger notification. Don't Retry.
          schema:
            $ref: '#/definitions/errorBody'            
        default:
          description: unexpected error. Callback must be retried in a few seconds.
          schema:
            $ref: '#/definitions/errorBody'



#        /$$            /$$$$$$  /$$           /$$   /$$     /$$
#       | $$           /$$__  $$|__/          |__/  | $$    |__/
#   /$$$$$$$  /$$$$$$ | $$  \__/ /$$ /$$$$$$$  /$$ /$$$$$$   /$$  /$$$$$$  /$$$$$$$   /$$$$$$$
#  /$$__  $$ /$$__  $$| $$$$    | $$| $$__  $$| $$|_  $$_/  | $$ /$$__  $$| $$__  $$ /$$_____/
# | $$  | $$| $$$$$$$$| $$_/    | $$| $$  \ $$| $$  | $$    | $$| $$  \ $$| $$  \ $$|  $$$$$$
# | $$  | $$| $$_____/| $$      | $$| $$  | $$| $$  | $$ /$$| $$| $$  | $$| $$  | $$ \____  $$
# |  $$$$$$$|  $$$$$$$| $$      | $$| $$  | $$| $$  |  $$$$/| $$|  $$$$$$/| $$  | $$ /$$$$$$$/
#  \_______/ \_______/|__/      |__/|__/  |__/|__/   \___/  |__/ \______/ |__/  |__/|_______/

definitions:

  PaymentInfo:
    type: object
    required:
      - paymentCurrencyId
      - paymentAmount
      - paymentApproved
      - paymentGatewayTransactionId
      - registrationDate
    properties:
      idType:
        type: string
        description: Type of the Unique number of identification in the billing system
        enum: [contracts, billingaccounts, subscriptions, subscribers]
        example: "contracts"
      Id:
        type: string
        description: The account Id or account number of type idType
        example: "123456789"        
      paymentAmount:
        type: number
        description: Amount to be paid for the particular invoice and ContractNumber.
        example: "23.45"
      paymentCurrencyId:
        type: string
        description: Three digit ISO identifier of the currency in which the payment is being posted.
        example: "USD"
      paymentApproved:
        type: boolean
        example: True
      paymentResultCode:
        type: number
        example: 100
      paymentGatewayTransactionId:
        type: string
        description: This is the TransactionID of our Millicom Payment Gateway
      paymentProcessorTransactionId:
        type: string
        description: This is the TransactionID of our Payment Gateway, at the point of writing this documentation this is the Cybersource Payment Gateway transactionID
      authorizationCode:
        type: string
        description: This is the authorization code of the reconciliation        
      paymentProcessorId:
        type: string
        description: Id of the processor identification, this must be a descriptive indetificator
      merchantId:
        type: string
        description: Id of the Merchant code registered on the bank institution
      merchantName:
        type: string
        description: Friendly name of the Merchant registered on the bank institution
      registrationDate:
        type: string
        format: date
        description: Date when the payment was registered in ISO 8601 format
        example: "1985-04-12T23:20:50.52Z"
      fulfillmentSucceded:
        type: boolean
        example: True
        description: True if the fulfillment was completed sucessfully. Not available on payment callback, only on fulfillment callback.
      paymentRegistrationId:
        type: string
        description: This is the id of this payment registration in the billing system. Not available on payment callback, only on fulfillment callback.
      customerIpAddress:
        type: string
        description: IP Address from client that submitted the registration, if it was online.
      paymentInstrument:
        $ref: "#/definitions/PaymentInstrument"        
      nameValuePairList:
        $ref: "#/definitions/NameValuePairList"
      links:
        type: array
        description: This is an array with the options that they can operate with the response. This is the aplicatino of HATEOAS
        items:
          $ref: "#/definitions/Link"

  Link:
    type: object
    properties:
      href:
        type: string
        description: This is the url of the method, in the first aproach we are going to use get order information and payment information. With this architecture we can use it asynchronous
      rel:
        type: string
        description: Description of the action in the method
      method:
        type: string
        description: Name of the HTTP method.
        enum: [GET, POST, DELETE, PUT]

  NameValuePairList:
    type: array
    items:
      $ref: "#/definitions/NameValuePair"
    description: An array of Name and Value pair to pass generic data
  NameValuePair:
    type: object
    properties:
      name:
        type: string
        description: This is the name of the of data
      value:
        type: string
        description: this is the value

  PaymentInstrument:
    type: object
    properties:
      paymentMethodId:
        type: number
        description: Id of the Payment Instrument used for the payment
      paymentMethodName:
        type: string
        description: Friendly Name of the Payment Instrument used for the payment
      maskedAccountId:
        type: string
        description: For credit cards, first 4 and last 6. For other payment types, the accountid masked according to security best practices. For MFS it could be the MSISDN
      expirationDate:
        type: string
        format: date
      bankName:
        type: string
        description: The bank institution associated witht he payment
      cardBrand:
        type: string
        description: Franchise or Brand of the registered card
      tokenized:
        type: boolean
        description: True if the credit card information came from a token and not from user input

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
  errorBody:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
